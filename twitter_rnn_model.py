# -*- coding: utf-8 -*-
"""Twitter- RNN-Model.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1tDFVk1XsyzDzkGz4zVPwczCUZbQ9_iLL
"""

import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import LabelEncoder
from keras.preprocessing.text import Tokenizer
from keras.preprocessing.sequence import pad_sequences
from keras.models import Sequential
from keras.layers import SimpleRNN, Dense, Embedding

data= pd.read_csv('twitter_training.csv', sep=',', names=['Tweet_ID','Entity','Sentiment','Tweet_content'])

data.dropna(inplace=True)  # Handle missing values
data.drop_duplicates(inplace=True)  # Handle duplicate values
encoder = LabelEncoder()
data['Sentiment'] = encoder.fit_transform(data['Sentiment'])  # Encode sentiment labels

X = data['Tweet_content']
y = data['Sentiment']
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=42)

max_words = 1000  # Max number of words to consider as features
tokenizer = Tokenizer(num_words=max_words)
tokenizer.fit_on_texts(X_train)
X_train_seq = tokenizer.texts_to_sequences(X_train)
X_test_seq = tokenizer.texts_to_sequences(X_test)
max_len = max([len(x) for x in X_train_seq])
X_train_pad = pad_sequences(X_train_seq, maxlen=max_len)
X_test_pad = pad_sequences(X_test_seq, maxlen=max_len)

model = Sequential()
model.add(Embedding(max_words, 64, input_length=max_len))
model.add(SimpleRNN(64))
model.add(Dense(1, activation='sigmoid'))

model.compile(loss='binary_crossentropy', optimizer='adam', metrics=['accuracy'])

model.fit(X_train_pad, y_train, epochs=10, batch_size=32, validation_split=0.1)